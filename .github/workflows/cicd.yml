name: CI/CD

on: [push, pull_request]

jobs:
  Build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [windows-msvc, windows-clang, ubuntu-clang, ubuntu-gcc, macos-clang]
        build-type: [Release, Debug]
        include:
          - name: windows-msvc
            os: windows-latest
            cxx: cl
            cc: cl
          - name: windows-clang
            os: windows-latest
            cxx: clang-cl
            cc: clang-cl
          - name: ubuntu-clang
            os: ubuntu-20.04
            cxx: clang++
            cc: clang
          - name: ubuntu-gcc
            os: ubuntu-20.04
            cxx: g++
            cc: gcc
          - name: macos-clang
            os: macos-latest
            cxx: clang++
            cc: clang

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Init Submodules
        uses: snickerbockers/submodules-init@v4

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Install llvm
        if: matrix.config.cxx == 'clang-cl'
        shell: powershell
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install llvm --global
          #echo "::set-env name=PATH::$env:PATH"

      - name: Set compiler to ${{ matrix.cxx }}
        uses: lukka/set-shell-env@v1
        with:
          CXX: ${{ matrix.cxx }}
          CC: ${{ matrix.cc }}

      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: Build
          key: ${{ matrix.name }}-build

      - name: Configure and Build
        uses: lukka/run-cmake@main
        id: runcmake
        with:
          cmakeGenerator: 'Ninja'
          cmakeBuildType: ${{ matrix.build-type }}
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: 'CMakeLists.txt'
          buildDirectory: 'Build'

      - uses: actions/upload-artifact@v2
        # Only clang artifacts are stored
        if: ${{ matrix.name == 'windows-clang' || matrix.name == 'ubuntu-clang' }}
        with:
          name: ${{ matrix.name }}-build
          path: ${{ runner.workspace }}/Build/Bin

  Test:
    needs: Build
    name: Test (Windows)
    runs-on: windows-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-clang-build
          path: ${{ runner.workspace }}

      - name: Run tests
        run: 'Debug/Tests.exe --report-timing --reporter=spec'
